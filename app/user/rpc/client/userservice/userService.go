// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package userservice

import (
	"context"

	"blog/app/user/rpc/pb/rpc"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	InfoReq     = rpc.InfoReq
	LoginReq    = rpc.LoginReq
	LoginRes    = rpc.LoginRes
	RegisterReq = rpc.RegisterReq
	RegisterRes = rpc.RegisterRes
	User        = rpc.User

	UserService interface {
		Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterRes, error)
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRes, error)
		Info(ctx context.Context, in *InfoReq, opts ...grpc.CallOption) (*User, error)
	}

	defaultUserService struct {
		cli zrpc.Client
	}
)

func NewUserService(cli zrpc.Client) UserService {
	return &defaultUserService{
		cli: cli,
	}
}

func (m *defaultUserService) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterRes, error) {
	client := rpc.NewUserServiceClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultUserService) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRes, error) {
	client := rpc.NewUserServiceClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUserService) Info(ctx context.Context, in *InfoReq, opts ...grpc.CallOption) (*User, error) {
	client := rpc.NewUserServiceClient(m.cli.Conn())
	return client.Info(ctx, in, opts...)
}
