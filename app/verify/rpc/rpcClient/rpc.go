// Code generated by goctl. DO NOT EDIT.
// Source: verify.proto

package rpcClient

import (
	"context"

	"blog/app/verify/rpc/pb/rpc"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AuthReq        = rpc.AuthReq
	AuthRes        = rpc.AuthRes
	GenTokenReq    = rpc.GenTokenReq
	GenTokenRes    = rpc.GenTokenRes
	JwtMap         = rpc.JwtMap
	RemoveTokenReq = rpc.RemoveTokenReq
	RemoveTokenRes = rpc.RemoveTokenRes

	Rpc interface {
		GenToken(ctx context.Context, in *GenTokenReq, opts ...grpc.CallOption) (*GenTokenRes, error)
		RemoveToken(ctx context.Context, in *RemoveTokenReq, opts ...grpc.CallOption) (*RemoveTokenRes, error)
		Auth(ctx context.Context, in *AuthReq, opts ...grpc.CallOption) (*AuthRes, error)
	}

	defaultRpc struct {
		cli zrpc.Client
	}
)

func NewRpc(cli zrpc.Client) Rpc {
	return &defaultRpc{
		cli: cli,
	}
}

func (m *defaultRpc) GenToken(ctx context.Context, in *GenTokenReq, opts ...grpc.CallOption) (*GenTokenRes, error) {
	client := rpc.NewRpcClient(m.cli.Conn())
	return client.GenToken(ctx, in, opts...)
}

func (m *defaultRpc) RemoveToken(ctx context.Context, in *RemoveTokenReq, opts ...grpc.CallOption) (*RemoveTokenRes, error) {
	client := rpc.NewRpcClient(m.cli.Conn())
	return client.RemoveToken(ctx, in, opts...)
}

func (m *defaultRpc) Auth(ctx context.Context, in *AuthReq, opts ...grpc.CallOption) (*AuthRes, error) {
	client := rpc.NewRpcClient(m.cli.Conn())
	return client.Auth(ctx, in, opts...)
}
